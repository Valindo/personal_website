{"body": "<div class=\"section\" id=\"sicp-challenge\">\n<h1>SICP Challenge<a class=\"headerlink\" href=\"#sicp-challenge\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Almost over a year back I started reading the long-awaited book from my bucket list,\n&#8220;Structure and Interpretation of Computer Programs&#8221;.  When I was reading the book, quite a\nlot of the things in the book were already known to me and therefore it started to get\nboring. But then I searched on the internet why so many people read the book SICP. The\nproblem was not the reason behind reading the book but the problem was the approach\ntowards the book. The book is not designed to be just read as if it is a novel but you also\nneed to solve the problems in the book. This made me go back to the book again.</p>\n<img alt=\"Book Cover of SICP\" class=\"align-center\" src=\"/images/sicp-wizard.png\" />\n<div class=\"section\" id=\"why-sicp\">\n<h2>Why SICP?<a class=\"headerlink\" href=\"#why-sicp\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Although I told the method was wrong because I was just reading the book, I decided that I\nwill try to solve every problem given in the book&#8217;s exercise section. Therefore I have set\nup a Github repository that will have all the code snippets of the exercises that I solve,\nirrespective if that exercise needs me to write code or not. The other reason for me going\nahead with SICP is that it teaches Computer Science and understanding the computer as an\nabstract machine used to manipulate information.</p>\n</div>\n<div class=\"section\" id=\"that-stuff-is-old-and-outdated\">\n<h2>That stuff is old and outdated<a class=\"headerlink\" href=\"#that-stuff-is-old-and-outdated\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>&#8220;This thing is outdated!&#8221;, &#8220;That thing is outdated!&#8221;, these are some of the most common words\nthat you can hear in the software industry. But is something really outdated? Well, I\nconsider &#8216;outdated&#8217; a very heavy word to be used so casually and I personally think that\noutdated is a very subjective term. &#8220;Is C outdated?&#8221;, &#8220;Is JavaScript outdated?&#8221;, well, it\ndepends... Depends on? Depends on what you actually want to do with that language. The\nbrowser that you are using right now will have most of its core written in C or C++ and will\nstill be maintained. But if you are writing a web application backend, is C a good choice?\nIf you have read SICP you will realize that the book is not at all about Scheme, but about\nthe abstract concepts, even the authors say that the book is not about and does not teach\nScheme. Even if some institutes like Massachusetts Institute of Technology themselves have\nstopped teaching this course, I don&#8217;t consider it outdated and therefore am going for it.</p>\n</div>\n<div class=\"section\" id=\"studying-that-same-stuff-again\">\n<h2>Studying that same stuff... Again?<a class=\"headerlink\" href=\"#studying-that-same-stuff-again\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Well, now you might say that I&#8217;ve already studied Computer Science in my career then why\nstudy the same stuff again? It has been ages since I&#8217;ve done any Computer Science, and at\ntimes I&#8217;m missing all of that while writing software for clients at a software consultancy.\nAlso, I&#8217;ve heard that the book has most of the programs in an immutable way because Scheme\nby design pushes towards immutability, which I think is very different from the way\nComputer Science was taught to me with C and all mutation through. In addition to that, I\nfeel that everyone who writes software should not forget the fundamentals and even if it is\nrepeating the same things again, it stays in memory and can be applied whenever needed in\nthe future.</p>\n</div>\n<div class=\"section\" id=\"but-then-why-scheme\">\n<h2>But then why Scheme?<a class=\"headerlink\" href=\"#but-then-why-scheme\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>My initial thought regarding programming language was to use Clojure because I had used\nClojureScript in a software project for making a front-end app deployed to Android using\nCordova. So I went ahead with Clojure as my choice of language. After a while, I realized\nthat Clojure as a language is very vast than as compared to Scheme, also it has many things\nalready implemented and ready to use out of the box. I&#8217;m not saying that Clojure is a bad\nchoice as a language. It is a pretty good choice to go with if you are making something\nlike a web application. You can also go with a full stack approach using Clojure on the\nbackend and ClojureScript on the front end, and the list just goes on.</p>\n<p>But I decided to choose MIT-Scheme after trying Clojure because when I had a look at the\nlanguage, it looked very small, something you can just get going with within a couple of\nhours. Another reason is that you can just copy/paste the examples from the book and then\nrun them using the MIT-Scheme interpreter.</p>\n</div>\n<div class=\"section\" id=\"aim-and-expected-result\">\n<h2>Aim and Expected Result<a class=\"headerlink\" href=\"#aim-and-expected-result\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>So my aim is to finish the whole book in the entire year of 2018 by doing a little bit of\nSICP almost every day. And that does not mean just reading the book but also solving the\nexercises extensively. I&#8217;ve set up a GitHub repository for solving all these problems and\npushing the code online. I&#8217;ve also set up a testing framework which can run all the tests\nwhen run using make therefore we know if all the code is working or not at any given point\nin time. This GitHub repository is hooked up to Travis-CI which will show if everything is\npassing or not in the repository. What I expect by the end of this is a difference in the\nway I think while writing code and a difference in the way I think about Computer Science.\nAs a follow-up post to this post, I will be writing a tutorial for super-fast learning\nMIT-Scheme to get started with SICP. I might also write posts for how I approached problems\nthat I felt difficult to solve in SICP.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.8", "display_toc": true, "title": "SICP Challenge", "sourcename": "2018-01-03-sicp-challenge.rst.txt", "customsidebar": null, "metatags": "", "current_page_name": "2018-01-03-sicp-challenge", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["2016-07-18-at-nelkinda-coderetreat", "At Nelkinda Coderetreat", "P", "previous"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">SICP Challenge</a><ul>\n<li><a class=\"reference internal\" href=\"#why-sicp\">Why SICP?</a></li>\n<li><a class=\"reference internal\" href=\"#that-stuff-is-old-and-outdated\">That stuff is old and outdated</a></li>\n<li><a class=\"reference internal\" href=\"#studying-that-same-stuff-again\">Studying that same stuff... Again?</a></li>\n<li><a class=\"reference internal\" href=\"#but-then-why-scheme\">But then why Scheme?</a></li>\n<li><a class=\"reference internal\" href=\"#aim-and-expected-result\">Aim and Expected Result</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../2016-07-18-at-nelkinda-coderetreat/", "title": "At Nelkinda Coderetreat"}, "page_source_suffix": ".rst"}